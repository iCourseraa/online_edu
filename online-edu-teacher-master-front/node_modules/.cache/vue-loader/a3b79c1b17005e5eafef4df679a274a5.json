{"remainingRequest":"C:\\Users\\86193\\Desktop\\online_edu_V1224\\online-edu-teacher-master-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\86193\\Desktop\\online_edu_V1224\\online-edu-teacher-master-front\\src\\views\\course_list\\educourse_list_view.vue?vue&type=script&lang=js","dependencies":[{"path":"C:\\Users\\86193\\Desktop\\online_edu_V1224\\online-edu-teacher-master-front\\src\\views\\course_list\\educourse_list_view.vue","mtime":1735547438993},{"path":"C:\\Users\\86193\\Desktop\\online_edu_V1224\\online-edu-teacher-master-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1734683766888},{"path":"C:\\Users\\86193\\Desktop\\online_edu_V1224\\online-edu-teacher-master-front\\node_modules\\babel-loader\\lib\\index.js","mtime":1734683771693},{"path":"C:\\Users\\86193\\Desktop\\online_edu_V1224\\online-edu-teacher-master-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1734683766888},{"path":"C:\\Users\\86193\\Desktop\\online_edu_V1224\\online-edu-teacher-master-front\\node_modules\\vue-loader\\lib\\index.js","mtime":1734683773729}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["educourse_list_view.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"educourse_list_view.vue","sourceRoot":"src/views/course_list","sourcesContent":["<template>\n  <!-- 列表视图 -->\n  <div class=\"list-view\">\n    <h3>视频列表</h3>\n    <el-table :data=\"videoList\" border style=\"width: 100%\">\n      <el-table-column prop=\"title\" label=\"视频标题\" />\n      <el-table-column prop=\"duration\" label=\"视频时长\" />\n      <el-table-column label=\"操作\">\n        <template #default=\"scope\">\n          <el-button size=\"small\" @click=\"selectVideo(scope.row)\">\n            查看详情\n          </el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <!-- 视频详情弹窗 -->\n    <el-dialog title=\"视频观看详情\" :visible.sync=\"show\" width=\"80%\">\n      <el-table :data=\"videoDetailList\">\n        <el-table-column property=\"nickname\" label=\"昵称\" width=\"150\"></el-table-column>\n        <el-table-column property=\"videoTitle\" label=\"视频标题\" width=\"150\"></el-table-column>\n        <el-table-column property=\"playNumber\" label=\"点击播放按钮次数\" width=\"200\"></el-table-column>\n        <el-table-column property=\"pauseNumber\" label=\"点击暂停按钮次数\"></el-table-column>\n        <el-table-column property=\"endedNumber\" label=\"是否完整播放\"></el-table-column>\n        <el-table-column property=\"seekNumber\" label=\"拖拽次数\"></el-table-column>\n        <el-table-column property=\"completionRateNumber\" label=\"完成率\"></el-table-column>\n        <el-table-column property=\"currTime\" label=\"播放时长\"></el-table-column>\n        <el-table-column property=\"kjNumber\" label=\"快进次数\"></el-table-column>\n        <el-table-column property=\"ktNumber\" label=\"快退次数\"></el-table-column>\n      </el-table>\n      <!-- 显示视频质量 -->\n      <div class=\"video-quality\">\n        <strong>视频质量：</strong>{{ videoQuality }}\n      </div>\n    </el-dialog>\n\n    <!-- 统计图 -->\n    <div>统计图</div>\n    <div id=\"myChart\" ref=\"myChart\" style=\"width: 100%; height: 480px;\"></div>\n    <!-- 显示视频质量 -->\n    <div class=\"video-quality-summary\">\n      <strong>视频质量：</strong>{{ videoQuality }}\n    </div>\n  </div>\n</template>\n\n<script>\nimport { listAll, videoNumber } from '@/api/video'; // 确保这些API方法存在\nimport * as echarts from \"echarts\";\n\nexport default {\n  name: \"EduCourseListView\",\n  data() {\n    return {\n      videoList: [], // 视频列表数据\n      videoDetailList: [], // 当前选中的视频详情数据\n      show: false, // 控制弹窗显示\n      option: {\n        tooltip: {\n          trigger: \"axis\",\n        },\n        legend: {\n          data: [\n            \"点击播放\",\n            \"点击暂停\",\n            \"快进次数\",\n            \"快退次数\",\n          ],\n        },\n        xAxis: {\n          type: \"category\",\n          boundaryGap: false,\n          data: [], // 动态设置\n        },\n        yAxis: {\n          type: \"value\",\n        },\n        dataZoom: [\n          {\n            type: \"slider\",\n            show: true,\n            start: 0,\n            end: 100,\n            bottom: 20, // 滑块位置\n          },\n        ],\n        series: [],\n      },\n      maxDuration: 0, // 当前视频的最大播放时长\n      videoQuality: 0, // 视频质量\n    };\n  },\n  mounted() {\n    this.fetchVideoList();\n    this.fetchVideoDetailView();\n    // 监听窗口大小变化以自适应图表\n    window.addEventListener(\"resize\", this.handleResize);\n  },\n  beforeDestroy() {\n    window.removeEventListener(\"resize\", this.handleResize);\n  },\n  watch: {\n    videoDetailList() {\n      // 选中视频后，更新图表和视频质量\n      this.getChart();\n      this.calculateVideoQuality();\n    },\n  },\n  methods: {\n    // 处理窗口大小变化\n    handleResize() {\n      const myChart = echarts.getInstanceByDom(this.$refs.myChart);\n      if (myChart) {\n        myChart.resize();\n      }\n    },\n\n    // 处理和聚合数据\n    processData() {\n      if (!this.videoDetailList.length) {\n        // 没有数据时清空图表\n        this.option.xAxis.data = [];\n        this.option.series = [];\n        return;\n      }\n\n      // 计算视频的总时长\n      this.maxDuration = Math.max(\n        ...this.videoDetailList.map((item) => item.currTime)\n      );\n\n      // 计算发送数据的间隔时间（秒）\n      const interval = Math.max(Math.floor(this.maxDuration / 20), 1); // 最小为1秒\n\n      // 创建时间段\n      const segments = [];\n      for (let i = 0; i <= this.maxDuration; i += interval) {\n        segments.push(Math.round(i));\n      }\n\n      // 初始化数据数组\n      const playNumberData = Array(segments.length - 1).fill(0);\n      const pauseNumberData = Array(segments.length - 1).fill(0);\n      const kjNumberData = Array(segments.length - 1).fill(0);\n      const ktNumberData = Array(segments.length - 1).fill(0);\n\n      // 聚合数据到各个时间段\n      this.videoDetailList.forEach((item) => {\n        const segmentIndex = Math.min(\n          Math.floor(item.currTime / interval),\n          segments.length - 2\n        );\n        playNumberData[segmentIndex] += item.playNumber;\n        pauseNumberData[segmentIndex] += item.pauseNumber;\n        kjNumberData[segmentIndex] += item.kjNumber;\n        ktNumberData[segmentIndex] += item.ktNumber;\n      });\n\n      // 设置X轴的时间段标签，例如\"0s - 5s\"\n      const xAxisData = [];\n      for (let i = 0; i < segments.length - 1; i++) {\n        xAxisData.push(`${segments[i]}s - ${segments[i + 1]}s`);\n      }\n\n      this.option.xAxis.data = xAxisData;\n\n      // 更新系列数据\n      this.option.series = [\n        { name: \"点击播放\", type: \"line\", data: playNumberData },\n        { name: \"点击暂停\", type: \"line\", data: pauseNumberData },\n        { name: \"快进次数\", type: \"line\", data: kjNumberData },\n        { name: \"快退次数\", type: \"line\", data: ktNumberData },\n      ];\n    },\n\n    // 初始化或更新图表\n    getChart() {\n      this.processData();\n      if (!this.option.xAxis.data.length) {\n        // 没有数据时不绘制图表\n        return;\n      }\n      const myChart = echarts.init(this.$refs.myChart);\n      myChart.setOption(this.option);\n      // 确保图表在窗口大小变化时自适应\n      window.addEventListener(\"resize\", myChart.resize);\n      // 清理前一个图表实例的resize事件\n      this.$once(\"hook:beforeDestroy\", () => {\n        window.removeEventListener(\"resize\", myChart.resize);\n        myChart.dispose();\n      });\n    },\n\n    // 选择视频，显示详情弹窗并更新数据\n    selectVideo(item) {\n      console.log(\"查看视频详情：\", item);\n      this.fetchVideoDetail(item.id);\n      this.show = true; // 显示弹窗\n    },\n\n    // 获取视频列表数据\n    async fetchVideoList() {\n      try {\n        const res = await listAll();\n        this.videoList = res.data;\n      } catch (error) {\n        console.error(\"获取视频列表失败:\", error);\n        this.$message.error(\"获取视频列表失败\");\n      }\n    },\n\n    // 获取所有视频的观看数据（用于统计图）\n    async fetchVideoDetailView() {\n      try {\n        const data = {\n          videoId: null, // null 表示获取所有视频的数据\n        };\n        const res = await videoNumber(data);\n        this.videoDetailList = res.data;\n      } catch (error) {\n        console.error(\"获取视频观看数据失败:\", error);\n        this.$message.error(\"获取视频观看数据失败\");\n      }\n    },\n\n    // 获取选定视频的观看详情\n    async fetchVideoDetail(videoId) {\n      try {\n        const data = {\n          videoId: videoId,\n        };\n        const res = await videoNumber(data);\n        this.videoDetailList = res.data;\n      } catch (error) {\n        console.error(\"获取视频详情失败:\", error);\n        this.$message.error(\"获取视频详情失败\");\n      }\n    },\n\n    // 计算视频质量\n    calculateVideoQuality() {\n      if (!this.videoDetailList.length) {\n        this.videoQuality = 0;\n        return;\n      }\n\n      // 计算播放完成率\n      const totalPlay = this.videoDetailList.reduce((sum, item) => sum + item.playNumber, 0);\n      const totalEnded = this.videoDetailList.reduce((sum, item) => sum + item.endedNumber, 0);\n      const completionRate = totalPlay ? totalEnded / totalPlay : 0;\n\n      // 计算平均播放时长占比\n      const totalCurrTime = this.videoDetailList.reduce((sum, item) => sum + item.currTime, 0);\n      const avgDurationRatio = this.maxDuration ? totalCurrTime / (this.maxDuration * this.videoDetailList.length) : 0;\n\n      // 快进和快退次数的总和\n      const totalKj = this.videoDetailList.reduce((sum, item) => sum + item.kjNumber, 0);\n      const totalKt = this.videoDetailList.reduce((sum, item) => sum + item.ktNumber, 0);\n\n      // 定义权重（可以调整）\n      const w1 = 0.4; // 播放完成率的权重\n      const w2 = 0.4; // 平均播放时长的权重\n      const w3 = -0.1; // 快进次数的权重（负面影响）\n      const w4 = -0.1; // 快退次数的权重（负面影响）\n\n      // 计算视频质量得分\n      this.videoQuality = (\n        w1 * completionRate +\n        w2 * avgDurationRatio +\n        w3 * (totalKj / totalPlay) +\n        w4 * (totalKt / totalPlay)\n      ).toFixed(2);\n    },\n  },\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.list-view {\n  padding: 20px;\n}\n\n.video-quality-summary {\n  margin-top: 20px;\n  font-size: 16px;\n}\n\n.video-quality {\n  margin-top: 20px;\n  font-size: 16px;\n}\n</style>\n"]}]}